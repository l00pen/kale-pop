{"version":3,"sources":["vegetables/kale.png","vegetables/garlic.png","vegetables/mint.png","ButtonNice.js","Controls.js","vegetables/Kale.js","vegetables/Garlic.js","vegetables/Mint.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ButtonNice","_ref","onClick","children","react_default","a","createElement","className","Controls","toggleVegetable","this","props","src_ButtonNice_0","Component","Kale","src","kaleImage","alt","Garlic","garlicImage","Mint","minthImage","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","garlic","kale","mint","synth","Tone","Synth","toMaster","bass","MembraneSynth","oscillator","type","envelope","attack","decay","sustain","release","mintSynth","PolySynth","loop","Loop","toneLoopCallback","bind","assertThisInitialized","set","distortion","Distortion","PWMOscillator","connect","start","Transport","time","console","log","Time","triggerAttackRelease","chord","Event","veggie","setState","defineProperty","src_Controls_0","src_vegetables_Kale","src_vegetables_Garlic","src_vegetables_Mint","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94124b9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kale.25994c48.png\";","module.exports = __webpack_public_path__ + \"static/media/garlic.13277a03.png\";","module.exports = __webpack_public_path__ + \"static/media/mint.42e84a28.png\";","import React from 'react';\n\nimport './ButtonNice.css';\n\nconst ButtonNice = ({ onClick, children }) => (\n  <button className=\"Button-Nice\" onClick={onClick}>\n    {children}\n  </button>\n);\n\nexport default ButtonNice;\n","import React, { Component } from 'react';\n\nimport ButtonNice from './ButtonNice'\n\nimport './Controls.css';\n\nclass Controls extends Component {\n  render() {\n    const { toggleVegetable } = this.props;\n    return (\n      <div className=\"Controls\">\n        <div className=\"Controls-item\">\n          <ButtonNice onClick={() => toggleVegetable('kale')}>\n            KALE\n          </ButtonNice>\n        </div>\n        <div className=\"Controls-item\">\n          <ButtonNice onClick={() => toggleVegetable('garlic')}>\n            GARLIC\n          </ButtonNice>\n        </div>\n        <div className=\"Controls-item\">\n          <ButtonNice onClick={() => toggleVegetable('mint')}>\n            MINT\n          </ButtonNice>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React from 'react';\n\nimport kaleImage from './kale.png';\n\nimport './Kale.css';\n\nconst Kale = () => (\n  <div className=\"Kale-Wrapper App-logo\">\n    <img src={kaleImage} className=\"Kale-Pop\" alt=\"Kale\" />\n  </div>\n)\n\nexport default Kale;\n","import React from 'react';\n\nimport garlicImage from './garlic.png';\n\nimport './Garlic.css';\n\nconst Garlic = () => (\n  <div className=\"Garlic-Wrapper\">\n    <div className=\"App-logo\">\n      <img src={garlicImage} className=\"Garlic-Salsa\" alt=\"garlic\" />\n    </div>\n  </div>\n)\n\nexport default Garlic;\n","import React from 'react';\n\nimport minthImage from './mint.png';\n\nimport './Mint.css';\n\nconst Mint = () => (\n  <div className=\"Mint-Wrapper App-logo\">\n    <img src={minthImage} className=\"Mint-Salsa\" alt=\"mint\" />\n  </div>\n)\n\nexport default Mint;\n","import React, { Component } from 'react';\nimport Tone from 'tone';\n\nimport Controls from './Controls'\nimport Kale from './vegetables/Kale';\nimport Garlic from './vegetables/Garlic';\nimport Mint from './vegetables/Mint';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      garlic: false,\n      kale: false,\n      mint: false,\n      synth: new Tone.Synth().toMaster(),\n      bass: new Tone.MembraneSynth({\n        oscillator : {\n          type : 'triangle8'\n        },\n        envelope : {\n          attack : 2,\n          decay : 1,\n          sustain: 0.4,\n          release: 4\n        }\n      }).toMaster(),\n      mintSynth: new Tone.PolySynth(6, Tone.Synth).toMaster(),\n      loop: new Tone.Loop(this.toneLoopCallback.bind(this), \"4n\"),\n    }\n\n    this.state.mintSynth.set(\"detune\", -1200);\n\n    const distortion = new Tone.Distortion(0.4).toMaster();\n    const pwm = new Tone.PWMOscillator(\"Bb3\").toMaster();\n\n    this.state.synth.connect(distortion);\n    // this.state.synth.connect(pwm);\n\n    this.state.loop.start();\n    Tone.Transport.start();\n  }\n\n  toneLoopCallback(time) {\n    if (this.state.garlic) {\n      console.log(time * 2, Tone.Time('8n'), time)\n      this.state.synth.triggerAttackRelease('C4', '4n', time * 2)\n      this.state.synth.triggerAttackRelease('E4', '8n', time + Tone.Time('8n'))\n      this.state.synth.triggerAttackRelease('E4', '8n', time + Tone.Time('8n'))\n      this.state.synth.triggerAttackRelease('G4', '16n', time)\n      this.state.synth.triggerAttackRelease('B4', '16n', time + Tone.Time('8t'))\n      this.state.synth.triggerAttackRelease('G4', '16', time + Tone.Time('8t') * 2)\n      this.state.synth.triggerAttackRelease('E4', '2n', time)\n    }\n\n    if (this.state.kale) {\n      this.state.bass.triggerAttackRelease(\"E2\", \"8n\", time);\n    }\n\n    if (this.state.mint) {\n      var chord = new Tone.Event(function(time, chord){\n        //the chord as well as the exact time of the event\n        //are passed in as arguments to the callback function\n      }, [\"D4\", \"E4\", \"F4\"]);\n      //start the chord at the beginning of the transport timeline\n      chord.start(time);\n      //loop it every measure for 8 measures\n      chord.loop = 8;\n    }\n  }\n\n  toggleVegetable(veggie) {\n    this.setState({ [veggie]: !this.state[veggie] })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            Pick a vegetable\n          </h1>\n          <Controls toggleVegetable={this.toggleVegetable.bind(this)} />\n          <div className=\"Vegetable-Band\">\n            { this.state.kale && <Kale />}\n            { this.state.garlic && <Garlic />}\n            { this.state.mint && <Mint />}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}